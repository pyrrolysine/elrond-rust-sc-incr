#!/usr/bin/python3

print('Content-Type: image/png\n\n', end = '', flush = True)

import hashlib

def hash(string):
    return hashlib.sha1(string.encode('utf-8')).hexdigest()

import os

query = os.getenv('QUERY_STRING') or ''
query = {k: v for k, v in map(lambda kv: kv.split('=') if '=' in kv else [kv, ''], query.split('&'))}

if 'blob' in query:
    blob = query['blob']
    assert blob.count('_') == 2
    parts = blob.split('_')
    width = int(parts[0])
    height = int(parts[1])
    pixels = parts[2]
    assert width > 0 and height > 0 and len(pixels) == 3 * width * height
    assert all(x.lower() in '0123456789abcdef' for x in pixels)
else:
    key = ''
    pixels = ''


def partition(xs, n):
    return [xs[base : base + n] for base in range(0, len(xs), n)]

if len(pixels) != 0:
    key = hash(pixels)

    if os.path.exists('/srv/http/nftsdrawn/' + key + '.png'):
        pass
    else:
        rgbs = partition(pixels, 3)
        
        pixel_width = 32
        pixel_height = 32

        bmp_width = pixel_width * width
        bmp_height = pixel_height * height

        depth = 32 # bpp
        resolution = 3200 # pixels/m

        zero = 0
        one = 1

        header_size = 40
        px_data_ptr = header_size + 14

        data_size = (depth // 8) * bmp_width * bmp_height
        file_size = data_size + header_size

        bmp_header = (
            b'BM'
            + file_size.to_bytes(4, 'little')
            + zero.to_bytes(4, 'little')
            + px_data_ptr.to_bytes(4, 'little')

            + header_size.to_bytes(4, 'little')
            + bmp_width.to_bytes(4, 'little')
            + (2**32 - bmp_height).to_bytes(4, 'little')
            + one.to_bytes(2, 'little')
            + depth.to_bytes(2, 'little')
            + zero.to_bytes(4, 'little')
            + data_size.to_bytes(4, 'little')
            + resolution.to_bytes(4, 'little')
            + resolution.to_bytes(4, 'little')
            + zero.to_bytes(4, 'little')
            + zero.to_bytes(4, 'little')
        )

        with open('/srv/http/nftsdrawn/' + key + '.bmp', mode = 'wb') as fd:
            fd.write(bmp_header)

            for row in partition(rgbs, width):
                for _ in range(pixel_height):
                    for pixel in row:
                        rr = eval('0x' + pixel[0] * 2)
                        gg = eval('0x' + pixel[1] * 2)
                        bb = eval('0x' + pixel[2] * 2)
                        rgb = bytes((bb, gg, rr, 0xFF))
                        fd.write(rgb * pixel_width)


        os.system('convert /srv/http/nftsdrawn/{file}.bmp png:/srv/http/nftsdrawn/{file}.png'.format(file = key))

os.system('cat /srv/http/nftsdrawn/{}.png'.format(key))


