#!/usr/bin/python3

import os

print('Content-Type: text/html\n')

query = os.getenv('QUERY_STRING') or ''
query = {k: v for k, v in map(lambda kv: kv.split('=') if '=' in kv else [kv, ''], query.split('&'))}

print('''
<html>
    <title>NFT Drawer</title>
    <meta charset="utf-8"</meta>
    <style>
        body {
            background-color:#111111;
        }
        body {
            color:#cccccc;
            font-size:min(2vh,2vw);
            font-family:"Verdana","Liberation Sans","Droid Sans";
        }
        a {
            text-decoration:none;
            color:#ccffff;
        }
        .huge {
            font-size:min(4vw,4vh);
        }
        .pixel {
            width:min(3vw,3vh);
            height:min(3vw,3vh);
            cursor:hand;
        }
        center {
            padding:5px;
        }
        .small {
            font-size:min(1.2vw,1.2vh);
        }
        .padded {
            padding:min(2vw,2vh);
        }
        .field, .button {
            border:0px;
            border-radius:10px;
            color:#ccc;
            background-color:#444;
            text-align:center;
            font-size:min(2vw,2vh);
        }
        .center {
            vertical-align:mid;
            text-align:center;
        }
        .field {
            width:40vw;
        }
        .button {
            border-radius:5px;
            background-color:#044;
            color:#eee;
            cursor:hand;
            margin:min(0.5vw,0.5vh);
        }
        .button:hover {
            background-color:#048;
            color:#fff;
        }
        li {
            text-align:left;
        }
    </style>
    <body id="body">
    </body>
    <script>
        const INSTALL_URL = "example.com/cgi-bin"

        document.body.onload = () => {
            set_canvas_size(state.canvas.size_default) //make_ui()
        }

        const make_ui = () => {
            markup("body", get_page())
            if(window.location.href.indexOf('mode=publish') > 0)
            {
                show_publishing_ui()
            }
        }

        const markup = (id, html) => {
            document.getElementById(id).innerHTML = html
        }

        const read = (id) => {
            return document.getElementById(id).value
        }

        const join = (xs) => {
            return xs.join("")
        }

        const repeat = (x, n) => {
            const xs = []
            for(let i = 0; i < n; ++i)
            {
                xs.push(x)
            }
            return xs
        }

        const inline = (xs) => {
            return (
                "<center>" + xs.map((x) => {
                    return "<span class='padded'>" + x + "</span>"
                }).join(" | ") + "</center>"
            )
        }

        const BLANK = "<p class='-huge'>&nbsp;</p>"

        const get_page = () => {
            const elems = [
                BLANK,
                "<center class='huge'>NFT Drawer</center>",
                BLANK,
                "<div id='main'>",
                ((state.canvas.side == 0) ? ask_canvas_size() : get_canvas()),
                "</div>",
                BLANK,
                "<center class='small'>Made by <a href='https://github.com/pyrrolysine'>@pyrrolysine</a>,<br/>running on <a href='https://elrond.com/'>the Elrond blockchain</a>.</center>",
            ]
            return join(elems)
        }

        const get_canvas = () => {
            const elems = [
                make_canvas(state.canvas.rows, state.canvas.cols, state.brush.fill),
            ]
            return join(elems)
        }

        const make_canvas = (rows, cols, fill) => {
            const elems = []
            elems.push("<center><table id='canvas'>")
            for(let i = 0; i < rows; ++i)
            {
                elems.push("<tr>")
                for(let j = 0; j < cols; ++j)
                {
                    elems.push(make_canvas_cell(i, j, fill))
                }
                elems.push("</tr>")
            }
            elems.push("</table></center>")

            elems.push(BLANK)
            elems.push(make_palette())

            elems.push(BLANK)
            elems.push(inline([
                get_publish_link(),
                get_canvas_size_selector(),
            ]))

            return join(elems)
        }

        const get_canvas_size_selector = () => {
            return "<a class='-small' href='javascript:set_canvas_size(0)'>Change canvas size</a>"
        }

        const get_publish_link = () => {
            return "<a class='-small' href='javascript:show_publishing_ui()'>Publish as NFT for " + state.publishing.price + "</a>"
        }

        const make_canvas_cell = (row, col, bg) => {
            return "<td class='pixel' id='" + pixel_at(row, col) + "' style='background-color:#" + bg + "' onclick='javascript:click_pixel(" + row + ", " + col + ")'></td>"
        }

        const make_palette_cell = (bg) => {
            return "<td class='pixel' style='background-color:#" + bg + "' onclick='javascript:click_palette(\\"" + bg + "\\")'></td>"
        }

        const state = {
            publishing: {
                address: "",
                token: "",
                name: "",
                price: "0.1 xeGLD",
            },
            canvas: {
                rows: null,
                cols: null,
                side: 0,
                size_default: 8,
                sizes_allowed: [4, 6, 8, 10, 12, 14, 16, 18, 20],
            },
            brush: {
                fill: 'ddd',
            },
            palette: {
                map: [],
                matrix: [
                    [
                        "222",
                        "444",
                        "666",
                        "aaa",
                        "ddd",
                        "000",
                        "000",
                        "000",
                    ],
                    [
                        "200",
                        "400",
                        "600",
                        "a00",
                        "d00",
                        "d0d",
                        "606",
                        "202",
                    ],
                    [
                        "020",
                        "040",
                        "080",
                        "0a0",
                        "0d0",
                        "dd0",
                        "660",
                        "220",
                    ],
                    [
                        "002",
                        "004",
                        "008",
                        "00a",
                        "00d",
                        "0dd",
                        "066",
                        "022",
                    ],
                ],
            },
        }

        state.palette.matrix.forEach((colors) => {
            colors.forEach((color) => {
                state.palette.map.push(color)
            })
        })

        const pixel_at = (row, col) => {
            return "canvas_" + row + "_" + col
        }

        const click_pixel = (row, col) => {
            document.getElementById(pixel_at(row, col)).style.backgroundColor = "#" + state.brush.fill
            state.canvas.drawing[row][col] = state.brush.fill
        }

        const click_palette = (bg) => {
            state.brush.fill = bg
        }

        const make_palette = () => {
            const elems = []
            elems.push("<center><table id='palette'>")
            for(let i = 0; i < state.palette.matrix.length; ++i)
            {
                elems.push("<tr>")
                for(let j = 0; j < state.palette.matrix[0].length; ++j)
                {
                    elems.push(make_palette_cell(state.palette.matrix[i][j]))
                }
                elems.push("</tr>")
            }
            elems.push("</table></center>")
            return join(elems)
        }

        const ask_canvas_size = () => {
            const elems = []
            for(let i = 0; i < state.canvas.sizes_allowed.length; ++i)
            {
                elems.push(make_canvas_size_setter(state.canvas.sizes_allowed[i]))
            }
            return join(elems)
        }

        const make_canvas_size_setter = (side) => {
            return "<center><a href='javascript:set_canvas_size(" + side + ")'>" + side + "x" + side + " canvas</a></center>"
        }

        const set_canvas_size = (n) => {
            state.canvas.side = n
            state.canvas.cols = state.canvas.side
            state.canvas.rows = state.canvas.side
            state.canvas.drawing = empty_matrix(state.canvas.rows, state.canvas.cols, state.brush.fill)
            make_ui()
        }

        const empty_matrix = (rows, cols, elem) => {
            const m = []
            for(let i = 0; i < rows; ++i)
            {
                const row = []
                for(let j = 0; j < cols; ++j)
                {
                    row.push(elem)
                }
                m.push(row)
            }
            return m
        }

        const publish = () => {
            const data = serialize_drawing()

            if(data.length == 0)
            {
                alert("Invalid colors!")
            }
            else
            {
                // window.location.href = "/cgi-bin/draw?canvas=" + data + "&token=" + state.publishing.token + "&address=" + state.publishing.address

                create_nft()
            }
        }

        const serialize_drawing = () => {
            const enc = []
            enc.push(state.canvas.rows + "_" + state.canvas.cols + "_")
            for(let i = 0; i < state.canvas.rows; ++i)
            {
                for(let j = 0; j < state.canvas.cols; ++j)
                {
                    const pixel = state.canvas.drawing[i][j]

                    if(state.palette.map.indexOf(pixel) < 0)
                    {
                        alert("Invalid canvas!")
                        return ""
                    }
                    else
                    {
                        enc.push(pixel)
                    }
                }
            }
            return enc.join("")
        }

        const show_publishing_ui = () => {
            markup("main", get_publishing_ui())
        }

        const get_publishing_ui = () => {
            const elems = []

            elems.push("<center><table>")

            elems.push("<tr>")
            elems.push("<td>Elrond wallet hex. address:</td>")
            elems.push("<td><input type='text' value='' placeholder='erd1...' id='address' class='field'></input></td>")
            elems.push("</tr>")

            elems.push("<tr><td>&#x3000;</td></tr>")

            elems.push("<tr>")
            elems.push("<td>ESDT token ID or ticker:</td>")
            elems.push("<td><input type='text' value='' placeholder='PAINT-abcdef' id='token' class='field'></input></td>")
            elems.push("</tr>")

            elems.push("<tr>")
            elems.push("<td></td><td class='center'>")
            elems.push([
                "If your token is not yet registered:",
                "<ol>",
                "<li> enter its ticker (name)</li>",
                "<li><input type='button' class='button' value='create' onclick='javascript:create_esdt()'></input> it</li>",
                "<li>replace the ticker name with the token ID<br/>from the transaction window</li>",
                "<li>enter the hex. wallet address given</li>",
                "<li><input type='button' class='button' value='enable NFTs' onclick='javascript:create_esdt_role()'></input> for it</li>",
                "<li>set the address field to the bech32 wallet address</li>",
                "</ol>",
            ].join(""))
            elems.push("</td>")
            elems.push("</tr>")

            elems.push("<tr><td>&#x3000;</td></tr>")

            elems.push("<tr>")
            elems.push("<td>Name of NFT:</td>")
            elems.push("<td><input type='text' value='' placeholder='My Painting' id='nftname' class='field'></input></td>")
            elems.push("</tr>")

            elems.push("<tr>")
            elems.push("<td></td>")
            elems.push("<td class='center'><input type='button' class='button' value='Publish' onclick='javascript:publish()'></input></td>")
            elems.push("</tr>")

            elems.push("</table></center>")

            return join(elems)
        }

        const CONTRACT_ISSUE_NFT = "erd1qqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzllls8a5w6u"
        const CONTRACT_SET_NFT_ROLE = CONTRACT_ISSUE_NFT

        const ROLE_NFT_CREATION = "45534454526f6c654e4654437265617465"

        const GAS_ISSUE_NFT = "70000000"


        const HEX = []
        const HEX_SET = "0123456789ABCDEF"

        for(let i = 0; i < HEX_SET.length; ++i)
        {
            for(let j = 0; j < HEX_SET.length; ++j)
            {
                const xx = HEX_SET[i] + HEX_SET[j]
                HEX.push(xx)
            }
        }

        const hex = (string) => {
            const bytes = []

            Array.from(string).forEach((cp) => {
                const n = cp.codePointAt(0)
                if(n > 0xFF)
                {
                    return ""
                }
                bytes.push(HEX[n])
            })

            return bytes.join("")
        }


        const CALLBACK_URL_MONITOR_SINGLE_VALUE = "https://" + INSTALL_URL + "/monitor_return1"
        const CALLBACK_URL_MONITOR_SUCCESS = "https://" + INSTALL_URL + "/monitor_ok"


        const make_request = (callbackUrl, receiver, value, data) => {
            const txurl = "https://devnet-wallet.elrond.com/hook/transaction"

            const url = (
                txurl
                + "?"
                + "gasLimit=" + GAS_ISSUE_NFT
                + "&"
                + "receiver=" + receiver
                + "&"
                + "value=" + value
                + "&"
                + "data=" + data
                + "&"
                + "&callbackUrl=" + callbackUrl
            )

            return url
        }


        const create_esdt = () => {
            const ticker = read("token")
            const address = read("address")

            if(ticker.length > 0)
            {
                const data = (
                    "issueNonFungible"
                    + "@" + hex(ticker)
                    + "@" + hex(ticker)
                )

                window.open(make_request(
                    CALLBACK_URL_MONITOR_SINGLE_VALUE,
                    CONTRACT_ISSUE_NFT,
                    "50000000000000000",
                    data
                ))
            }
            else
            {
                alert("Please enter a valid token ticker")
            }
        }

        const create_esdt_role = () => {
            const ticker = read("token")
            const address = read("address")

            if(ticker.length > 0 && address.length > 0)
            {
                const data = (
                    "setSpecialRole"
                    + "@" + hex(ticker)
                    + "@" + address
                    + "@" + ROLE_NFT_CREATION
                )

                window.open(make_request(
                    CALLBACK_URL_MONITOR_SUCCESS,
                    CONTRACT_SET_NFT_ROLE,
                    "0",
                    data
                ))
            }
            else
            {
                alert("Please enter a valid address and token ticker")
            }
        }

        const create_nft = () => {
            const ticker = read("token")
            const address = read("address")
            const nftname = read("nftname")

            if(ticker.length > 0 && address.length > 0 && nftname.length > 0)
            {
                const uri = "https://" + INSTALL_URL + "/nft_render.png?blob=" + serialize_drawing()

                const ROYALTIES = "1388" /* 50% */
                const hash = repeat("A", 46).join("")
                const attrs = "Type:pixel_drawing"

                const data = (
                    "ESDTNFTCreate"
                    + "@" + hex(ticker)
                    + "@" + "01" /* one unit */
                    + "@" + hex(nftname)
                    + "@" + ROYALTIES
                    + "@" + hex(hash)
                    + "@" + hex(attrs)
                    + "@" + hex(uri)
                )

                const url = make_request(
                    CALLBACK_URL_MONITOR_SUCCESS,
                    address,
                    "0",
                    data
                )
                console.log(url)
                window.open(url)
            }
            else
            {
                alert("Please enter a valid address, token ticker, and NFT name")
            }
        }

    </script>
</html>
''')


